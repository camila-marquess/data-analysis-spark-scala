[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\CAMILA~1\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\CAMILA~1\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 186.6108ms
[debug]       Load.loadUnit: defsScala took 0.536ms
[debug] [Loading] Scanning directory C:\Users\Camila Marques\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Camila Marques\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 27.3874 ms
[debug]           Load.resolveProject(global-plugins) took 329.8574ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Camila Marques\.sbt\1.0\plugins, plugins: List(<none>))) took 392.2057ms
[debug] [Loading] Done in C:\Users\Camila Marques\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 429.8032ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.8898ms
[debug]     Load.loadUnit(file:/C:/Users/Camila%20Marques/.sbt/1.0/plugins/, ...) took 636.7343ms
[debug]   Load.apply: load took 920.3982ms
[debug]   Load.apply: resolveProjects took 11.4092ms
[debug]   Load.apply: finalTransforms took 101.2963ms
[debug]   Load.apply: config.delegates took 11.7183ms
[debug]   Load.apply: Def.make(settings)... took 716.7319ms
[debug]   Load.apply: structureIndex took 149.8233ms
[debug]   Load.apply: mkStreams took 2.9321ms
[info] loading global plugins from C:\Users\Camila Marques\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3974.7397ms
[debug]           Load.loadUnit: plugins took 38.843ms
[debug]           Load.loadUnit: defsScala took 0.0064ms
[debug] [Loading] Scanning directory C:\data-analysis\project
[debug]             Load.loadUnit: mkEval took 17.1795ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\data-analysis\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.188 ms
[info] loading settings for project data-analysis-build from idea1.sbt ...
[debug]               Load.resolveProject(data-analysis-build) took 3.7632ms
[debug]             Load.loadTransitive: finalizeProject(Project(id data-analysis-build, base: C:\data-analysis\project, plugins: List(<none>))) took 7.7539ms
[debug] [Loading] Done in C:\data-analysis\project, returning: (data-analysis-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3101.027ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.8833ms
[debug]         Load.loadUnit(file:/C:/data-analysis/project/, ...) took 3146.0025ms
[debug]       Load.apply: load took 3147.7518ms
[debug]       Load.apply: resolveProjects took 0.1384ms
[debug]       Load.apply: finalTransforms took 11.0088ms
[debug]       Load.apply: config.delegates took 0.6318ms
[debug]       Load.apply: Def.make(settings)... took 101.447ms
[debug]       Load.apply: structureIndex took 37.9882ms
[debug]       Load.apply: mkStreams took 0.0044ms
[info] loading project definition from C:\data-analysis\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5116.7304ms
[debug]     Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory C:\data-analysis
[debug]       Load.loadUnit: mkEval took 0.4276ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.7842 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 34.1129ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\data-analysis, plugins: List(<none>))) took 41.9841ms
[debug] [Loading] Done in C:\data-analysis, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1839.5698ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.2537ms
[debug]   Load.loadUnit(file:/C:/data-analysis/, ...) took 6971.5195ms
[debug] Load.apply: load took 6973.6165ms
[debug] Load.apply: resolveProjects took 0.1754ms
[debug] Load.apply: finalTransforms took 29.8296ms
[debug] Load.apply: config.delegates took 0.4437ms
[debug] Load.apply: Def.make(settings)... took 115.1938ms
[debug] Load.apply: structureIndex took 26.4735ms
[debug] Load.apply: mkStreams took 0.0046ms
[info] set current project to data-analysis (in build file:/C:/data-analysis/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59997 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59997, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to data-analysis (in build file:/C:/data-analysis/)
[debug] > Exec(idea-shell, None, None)
